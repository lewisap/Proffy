<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.marklogic.example.controllers"/>
    <context:component-scan base-package="com.marklogic.example.services"/>
    <context:component-scan base-package="com.marklogic.example.factories"/>
    <mvc:annotation-driven/>



    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!--
        Set up the credentials cache so that we can invoke MarkLogic with credentials.
        This may not be required, depending on the existing application.  For this example,
        I needed to invoke end points on MarkLogic.  I'm assuming that your application
        already invokes endpoints on MarkLogic and has a credential mechanism already in
        place.
    -->
    <bean id="credentials" class="org.apache.http.auth.UsernamePasswordCredentials">
        <constructor-arg name="userName" value="admin"/>
        <constructor-arg name="password" value="MixxT@p3"/>
    </bean>

    <!--

    -->
    <bean id="addProfilingHeader" class="com.marklogic.example.support.AddProfilingHeader"></bean>
    <bean id="messageConverter" class="com.marklogic.example.support.MultipartPerformanceMessageConverter">
        <property name="profileDataHandler">
            <bean class="com.marklogic.example.profiling.DynaTraceProfileDataHandler"></bean>
        </property>
    </bean>
</beans>